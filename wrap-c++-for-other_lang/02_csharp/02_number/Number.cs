//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Number {

public class Number : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Number(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Number obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Number() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          nnumberPINVOKE.delete_Number(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Number(int start) : this(nnumberPINVOKE.new_Number(start), true) {
  }

  public void add(int value) {
    nnumberPINVOKE.Number_add(swigCPtr, value);
  }

  public void sub(int value) {
    nnumberPINVOKE.Number_sub(swigCPtr, value);
  }

  public void display() {
    nnumberPINVOKE.Number_display(swigCPtr);
  }

  public void cube() {
    nnumberPINVOKE.Number_cube(swigCPtr);
  }

  public int data {
    set {
      nnumberPINVOKE.Number_data_set(swigCPtr, value);
    } 
    get {
      int ret = nnumberPINVOKE.Number_data_get(swigCPtr);
      return ret;
    } 
  }

}

}
